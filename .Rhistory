#     pov_rate_yg_pc  = sum(weight[yg_pc  < pline_mod], na.rm = TRUE) * 100/ sum(weight, na.rm = TRUE),
#     pov_rate_yn_pc  = sum(weight[yn_pc  < pline_mod], na.rm = TRUE) * 100/ sum(weight, na.rm = TRUE),
#     pov_rate_yc_pc  = sum(weight[yc_pc  < pline_mod], na.rm = TRUE) * 100/ sum(weight, na.rm = TRUE),
#     pov_rate_yf_pc  = sum(weight[yf_pc  < pline_mod], na.rm = TRUE) * 100/ sum(weight, na.rm = TRUE)
#   )
#
# # Compute number of poor
# nbr_poor <- before_data_wtht_na %>%
#   summarise(
#     nbr_poor_yd_pc  = sum(weight[yd_pc  < pline_mod], na.rm = TRUE),
#     nbr_poor_yp_pc  = sum(weight[yp_pc  < pline_mod], na.rm = TRUE),
#     nbr_poor_yg_pc  = sum(weight[yg_pc  < pline_mod], na.rm = TRUE),
#     nbr_poor_yn_pc  = sum(weight[yn_pc  < pline_mod], na.rm = TRUE),
#     nbr_poor_yc_pc  = sum(weight[yc_pc  < pline_mod], na.rm = TRUE),
#     nbr_poor_yf_pc  = sum(weight[yf_pc  < pline_mod], na.rm = TRUE)
#   )
#
# # Poverty Gap
# poverty_gap <- tibble(
#   pov_gap_yd_pc  = weighted.mean(before_data_wtht_na$pov_gap_yd_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100,
#   pov_gap_yp_pc  = weighted.mean(before_data_wtht_na$pov_gap_yp_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100,
#   pov_gap_yg_pc  = weighted.mean(before_data_wtht_na$pov_gap_yg_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100,
#   pov_gap_yn_pc  = weighted.mean(before_data_wtht_na$pov_gap_yn_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100,
#   pov_gap_yc_pc  = weighted.mean(before_data_wtht_na$pov_gap_yc_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100,
#   pov_gap_yf_pc  = weighted.mean(before_data_wtht_na$pov_gap_yf_pc,  before_data_wtht_na$weight, na.rm = TRUE)*100
# )
#
# # Poverty severity index - squared poverty gap measure
# poverty_sev <- tibble(
#   pov_sev_yd_pc  = weighted.mean(before_data_wtht_na$pov_gap_yd_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE),
#   pov_sev_yp_pc  = weighted.mean(before_data_wtht_na$pov_gap_yp_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE),
#   pov_sev_yg_pc  = weighted.mean(before_data_wtht_na$pov_gap_yg_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE),
#   pov_sev_yn_pc  = weighted.mean(before_data_wtht_na$pov_gap_yn_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE),
#   pov_sev_yc_pc  = weighted.mean(before_data_wtht_na$pov_gap_yc_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE),
#   pov_sev_yf_pc  = weighted.mean(before_data_wtht_na$pov_gap_yf_pc_sqrd,  before_data_wtht_na$weight, na.rm = TRUE)
# )
#
# # Poverty measurements matrice
# Baseline_data_tab <- as.data.frame(cbind(t(poverty_headcount_ratio), t(nbr_poor), t(poverty_gap), t(poverty_sev),
#                                          Income = c("Disposable Income","Market Income plus pensions",
#                                                     "Gross Income","Net Market Income","Consumable Income","Final Income"))) %>%
#   pivot_longer(cols = starts_with("V"),
#                names_to = "Parameter",
#                values_to = "Pre-reform",
#                values_drop_na = TRUE) %>%
#   mutate(Parameter = recode(Parameter,
#                             V1 = "Rate of poverty",
#                             V2 = "Number of poor",
#                             V3 = "Poverty gap",
#                             V4 = "Poverty severity"),
#          `Pre-reform` = round(as.numeric(`Pre-reform`),2)
#   )
write_rds(Baseline_data_tab, paste0(here(),output_folder, "/Shiny Data/Baseline_data_tab.rds"))
# Gini results
# gini_results <- list(
#   yp_pc  = wINEQ::Gini(before_data_wtht_na$yp_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE),
#   yg_pc  = wINEQ::Gini(before_data_wtht_na$yg_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE),
#   yn_pc  = wINEQ::Gini(before_data_wtht_na$yn_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE),
#   yd_pc  = wINEQ::Gini(before_data_wtht_na$yd_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE),
#   yc_pc  = wINEQ::Gini(before_data_wtht_na$yc_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE),
#   yf_pc  = wINEQ::Gini(before_data_wtht_na$yf_pc, W = before_data_wtht_na$weight, fast = TRUE, rounded.weights = TRUE)
# )
before_data_wtht_na <- before_data_wtht_na %>%
mutate(
# Education
educ_preschool_hh     = educ_preschool_hh     %>% structure(label = "Government spending on preschool education, at the household level"),
educ_primary_hh       = educ_primary_hh       %>% structure(label = "Government spending on primary education, at the household level"),
educ_secondary_hh     = educ_secondary_hh     %>% structure(label = "Government spending on secondary education, at the household level"),
educ_postsecondary_hh = educ_postsecondary_hh %>% structure(label = "Government spending on post-secondary education, at the household level"),
educ_tertiary_hh      = educ_tertiary_hh      %>% structure(label = "Government spending on tertiary education, at the household level"),
educ_masterphd_hh     = educ_masterphd_hh     %>% structure(label = "Government spending on master's and PhD education, at the household level"),
# Health - Government
health_gov_hiv_hh     = health_gov_hiv_hh     %>% structure(label = "Health spending on HIV/AIDS by government, at the household level"),
health_gov_ncd_hh     = health_gov_ncd_hh     %>% structure(label = "Health spending on NCDs by government, at the household level"),
health_gov_rep_hh     = health_gov_rep_hh     %>% structure(label = "Health spending on reproductive health by government, at the household level"),
health_gov_mal_hh     = health_gov_mal_hh     %>% structure(label = "Health spending on malaria by government, at the household level"),
health_gov_tb_hh      = health_gov_tb_hh      %>% structure(label = "Health spending on tuberculosis by government, at the household level"),
health_gov_nut_hh     = health_gov_nut_hh     %>% structure(label = "Health spending on nutritional deficiencies by government, at the household level"),
health_gov_other_hh   = health_gov_other_hh   %>% structure(label = "Health spending on other conditions by government, at the household level"),
# Health - Donors
health_donor_hiv_hh   = health_donor_hiv_hh   %>% structure(label = "Health spending on HIV/AIDS by donors, at the household level"),
health_donor_ncd_hh   = health_donor_ncd_hh   %>% structure(label = "Health spending on NCDs by donors, at the household level"),
health_donor_rep_hh   = health_donor_rep_hh   %>% structure(label = "Health spending on reproductive health by donors, at the household level"),
health_donor_mal_hh   = health_donor_mal_hh   %>% structure(label = "Health spending on malaria by donors, at the household level"),
health_donor_tb_hh    = health_donor_tb_hh    %>% structure(label = "Health spending on tuberculosis by donors, at the household level"),
health_donor_nut_hh   = health_donor_nut_hh   %>% structure(label = "Health spending on nutritional deficiencies by donors, at the household level"),
health_donor_other_hh = health_donor_other_hh %>% structure(label = "Health spending on other conditions by donors, at the household level"),
# Health - Households
health_hh_hiv_hh      = health_hh_hiv_hh      %>% structure(label = "Health spending on HIV/AIDS by households, at the household level"),
health_hh_ncd_hh      = health_hh_ncd_hh      %>% structure(label = "Health spending on NCDs by households, at the household level"),
health_hh_rep_hh      = health_hh_rep_hh      %>% structure(label = "Health spending on reproductive health by households, at the household level"),
health_hh_mal_hh      = health_hh_mal_hh      %>% structure(label = "Health spending on malaria by households, at the household level"),
health_hh_tb_hh       = health_hh_tb_hh       %>% structure(label = "Health spending on tuberculosis by households, at the household level"),
health_hh_nut_hh      = health_hh_nut_hh      %>% structure(label = "Health spending on nutritional deficiencies by households, at the household level"),
health_hh_other_hh    = health_hh_other_hh    %>% structure(label = "Health spending on other conditions by households, at the household level")
)
# Compute deciles using weighted quantiles
before_data_wtht_na <- before_data_wtht_na %>%
mutate(
# Weighted decile using Hmisc::wtd.quantile (numeric decile labels 1 to 10)
decile = as.numeric(cut(
yp_pc,
breaks = c(-Inf, wtd.quantile(yp_pc, weights = weight, probs = seq(0.1, 1, 0.1), na.rm = TRUE)),
labels = 1:10,
include.lowest = TRUE,
right = TRUE
)),
curr_level = "Baseline"
)
# Saving
write_rds(before_data_wtht_na, paste0(here(),output_folder, "/Shiny Data/baseline_final_data.rds"))
write_rds(Baseline_data_tab, paste0(here(),output_folder, "/Shiny Data/Baseline_data_tab.rds"))
# # Variable to compute some stat
# vars_sum <- c("yp_hh", "dtx_all_hh", "yn_hh", "dtr_all_hh", "dtr_nct_hh", "dtr_frmz_hh", "dtr_nfra_hh", "dtr_masaf_hh",
#               "dtr_ffwk_hh", "dtr_ifwp_hh", "dtr_ses_hh", "dtr_tes_hh", "dtr_onc_hh", "dct_hh", "dct_gov_hh", "dct_ngo_hh", "dct_fips_hh",
#               "yg_hh", "yd_hh", "sub_all_hh", "sub_electri_hh", "sub_fuel_hh", "itx_all_hh", "yc_hh",
#               "educ_hh", "educ_preschool_hh", "educ_primary_hh", "educ_secondary_hh", "educ_postsecondary_hh",
#               "educ_tertiary_hh", "educ_masterphd_hh", "health_hh",
#               "health_gov_hiv_hh", "health_gov_ncd_hh", "health_gov_rep_hh", "health_gov_mal_hh", "health_gov_tb_hh",
#               "health_gov_nut_hh", "health_gov_other_hh", "Users_fee_hh", "Education_fee_hh", "Health_fee_hh", "yf_hh")
#
# vars_bin <- c("yp_hh", "dtx_all_hh", "yn_hh", "dtr_all_hh", "dtr_nct_hh", "dtr_frmz_hh", "dtr_nfra_hh", "dtr_masaf_hh",
#               "dtr_ffwk_hh", "dtr_ifwp_hh", "dtr_ses_hh", "dtr_tes_hh", "dtr_onc_hh", "dct_hh", "dct_gov_hh", "dct_ngo_hh", "dct_fips_hh",
#               "yg_hh", "yd_hh", "sub_all_hh", "sub_electri_hh", "sub_fuel_hh", "itx_all_hh", "yc_hh",
#               "educ_hh", "health_hh", "Users_fee_hh", "Education_fee_hh", "Health_fee_hh", "yf_hh")
#
#
# # Create binary indicators and Generate sum by decile (in millions)
# before_data_wtht_na <- before_data_wtht_na %>%
#   mutate(across(all_of(vars_bin), ~ as.integer(. > 0), .names = "i_{.col}")) %>%
#   mutate(across(all_of(vars_sum), ~ . / 1e6))
#
#
# i_vars_bin <- paste0("i_", vars_bin)
#
# # Sum by decile (weighted)
# sum_by_decile <- before_data_wtht_na %>%
#   filter(pid == 1) %>%
#   group_by(decile) %>%
#   summarise(across(all_of(vars_sum), ~ sum(. * weight, na.rm = TRUE), .names = "{.col}")) %>%
#   arrange(decile)
#
# # Export as plain CSV
# write.csv(sum_by_decile, paste0(here(),output_folder, "/Shiny Data/sum_deciles_MWB_DM.csv"))
#
# # Mean by decile (weighted)
# mean_by_decile <- before_data_wtht_na %>%
#   filter(pid == 1) %>%
#   group_by(decile) %>%
#   summarise(across(all_of(vars_sum), ~ weighted.mean(., weight, na.rm = TRUE), .names = "{.col}")) %>%
#   arrange(decile)
#
# write.csv(mean_by_decile,  paste0(here(),output_folder, "/Shiny Data/mean_deciles_MWB_DM.csv"))
#
#
# # Count of households with positive value by decile
# count_hh_by_decile <- before_data_wtht_na %>%
#   filter(pid == 1) %>%
#   group_by(decile) %>%
#   summarise(across(all_of(i_vars_bin), ~ sum(. * weight, na.rm = TRUE), .names = "{.col}")) %>%
#   arrange(decile)
#
# write.csv(count_hh_by_decile, paste0(here(),output_folder, "/Shiny Data/count_hogares_MWB_DM.csv"))
#
#
###############################################################################.
#
# Global script ----
#
###############################################################################.
################################################################################
######### CEQ initial data wrangling file for MALAWI ###########################
################################################################################
# Data wrangling
######################## Importing library and external files ##################
### List of required packages
required_packages <- c("tidyverse", "dplyr","haven","here","DescTools","labelled",
"survey","wINEQ","Hmisc","purrr","bslib","shiny","tidyr",
"shinyFeedback","phsstyles","bsicons","shinyjs","cicerone",
"shinyjs","highcharter","shinycssloaders","reactable")
### Check if packages are installed
missing_packages <- setdiff(required_packages, installed.packages()[,"Package"])
### Install missing packages
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
### Load all packages
lapply(setdiff(required_packages,"plyr"), library, character.only = TRUE)
# Remove all objects
rm(list = ls())
# Set vector size to maximum value
mem.maxVSize(vsize = Inf)
################################################################################
######################## Importing the datasets ################################
################################################################################
## Set file-paths
data_folder <- "/input/Data"
output_folder <- "/output"
script_path <- paste0(data_folder, "/Script")
# 2. Sourcing modules functions  ------------------------
list.files(paste0(here(),"/script/modules/results visualization"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
list.files(paste0(here(),"/script/modules/buttons"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
source(paste0(here(),"/script/graph_functions.R"))
source(paste0(here(),"/script/01_simulated function.R"))
# 3. Required datafiles ------------------------------------------------------------
bl_df <- readRDS(paste0(here(),output_folder,"/Shiny Data/before_data_wtht_na.rds"))
bl_cncpts <- readRDS(paste0(here(),output_folder,"/Shiny Data/Baseline_data_tab.rds"))
# shapefiles (for map)
#ca_bound <- readRDS("data/CA_boundary.rds") # Council area
# List of possible selected output
# HSC partnership names - also used as the choices for an additional parent area filter
# when intermediate zone/localities are selected to reduce the number of IZ/localities
pov_parameter_list <- sort(unique(bl_cncpts$Parameter))
pov_area_list <- sort(unique(bl_cncpts$Area))
# module ui function
# icon and description of the profile are optional arguments
# 5. Dashboard theme ---------------------------------------------------------------
# see https://rstudio.github.io/bslib/articles/bs5-variables/ for more details
phs_theme <- bs_theme(
# high level theming
version = 5, # bootstrap v5 required to use bslib components (like cards etc.)
bg = "white", # make background white
fg = "#222", # make foreground darkgrey/black
"progress-bar-bg" = "0078D4",
bootswatch = "shiny", # use default shiny theme
primary = "#006D77", # make primary colour green - this will change i.e. active pill colour
"form-label-font-weight" = "550"#, # font-weight for filter labels
) %>%
# create colour variables to use below
bs_add_variables(
"phs-gray" = "#F2F2F2",
"phs-blue" = "#0078D4",
"phs-teal" = "#006D77"
) %>%
# lower level theming
bs_add_rules(
list(
".info-box-header { background-color: $phs-teal; color: #FFF;}", # info box header lighter phs purple colour with white text
".methodology-table td{ border:thin solid black; padding:3px;}", # for indicator def tab - make nested table cells have black border
".rt-tr-details {padding: 0px; box-shadow: inset 0 1px 3px #dbdbdb; background: #FDFDFC;}", # for indicator definitions tab - make expandable panel grey
".chart-controls-icon {background-color:$phs-blue; color:white; border-radius:5em; padding:5px;}" # styling of the chart controls icon
)
)
simulate_tax_policy(bl_df,bl_cncpts,0,0,0,0)
###############################################################################.
#
# Global script ----
#
###############################################################################.
################################################################################
######### CEQ initial data wrangling file for MALAWI ###########################
################################################################################
# Data wrangling
######################## Importing library and external files ##################
### List of required packages
required_packages <- c("tidyverse", "dplyr","haven","here","DescTools","labelled",
"survey","wINEQ","Hmisc","purrr","bslib","shiny","tidyr",
"shinyFeedback","phsstyles","bsicons","shinyjs","cicerone",
"shinyjs","highcharter","shinycssloaders","reactable")
### Check if packages are installed
missing_packages <- setdiff(required_packages, installed.packages()[,"Package"])
### Install missing packages
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
### Load all packages
lapply(setdiff(required_packages,"plyr"), library, character.only = TRUE)
# Remove all objects
rm(list = ls())
# Set vector size to maximum value
mem.maxVSize(vsize = Inf)
################################################################################
######################## Importing the datasets ################################
################################################################################
## Set file-paths
data_folder <- "/input/Data"
output_folder <- "/output"
script_path <- paste0(data_folder, "/Script")
# 2. Sourcing modules functions  ------------------------
list.files(paste0(here(),"/script/modules/results visualization"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
list.files(paste0(here(),"/script/modules/buttons"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
source(paste0(here(),"/script/graph_functions.R"))
source(paste0(here(),"/script/01_simulated function.R"))
# 3. Required datafiles ------------------------------------------------------------
bl_df <- readRDS(paste0(here(),output_folder,"/Shiny Data/before_data_wtht_na.rds"))
bl_cncpts <- readRDS(paste0(here(),output_folder,"/Shiny Data/Baseline_data_tab.rds"))
# shapefiles (for map)
#ca_bound <- readRDS("data/CA_boundary.rds") # Council area
# List of possible selected output
# HSC partnership names - also used as the choices for an additional parent area filter
# when intermediate zone/localities are selected to reduce the number of IZ/localities
pov_parameter_list <- sort(unique(bl_cncpts$Parameter))
pov_area_list <- sort(unique(bl_cncpts$Area))
# module ui function
# icon and description of the profile are optional arguments
# 5. Dashboard theme ---------------------------------------------------------------
# see https://rstudio.github.io/bslib/articles/bs5-variables/ for more details
phs_theme <- bs_theme(
# high level theming
version = 5, # bootstrap v5 required to use bslib components (like cards etc.)
bg = "white", # make background white
fg = "#222", # make foreground darkgrey/black
"progress-bar-bg" = "0078D4",
bootswatch = "shiny", # use default shiny theme
primary = "#006D77", # make primary colour green - this will change i.e. active pill colour
"form-label-font-weight" = "550"#, # font-weight for filter labels
) %>%
# create colour variables to use below
bs_add_variables(
"phs-gray" = "#F2F2F2",
"phs-blue" = "#0078D4",
"phs-teal" = "#006D77"
) %>%
# lower level theming
bs_add_rules(
list(
".info-box-header { background-color: $phs-teal; color: #FFF;}", # info box header lighter phs purple colour with white text
".methodology-table td{ border:thin solid black; padding:3px;}", # for indicator def tab - make nested table cells have black border
".rt-tr-details {padding: 0px; box-shadow: inset 0 1px 3px #dbdbdb; background: #FDFDFC;}", # for indicator definitions tab - make expandable panel grey
".chart-controls-icon {background-color:$phs-blue; color:white; border-radius:5em; padding:5px;}" # styling of the chart controls icon
)
)
simulate_tax_policy(bl_df,bl_cncpts,0,0,0,0)
curr_area
curr_area
tempdf$reside
bl_df
bl_cncpts
simulate_tax_policy(bl_df,bl_cncpts,0,0,0,0)
###############################################################################.
#
# Global script ----
#
###############################################################################.
################################################################################
######### CEQ initial data wrangling file for MALAWI ###########################
################################################################################
# Data wrangling
######################## Importing library and external files ##################
### List of required packages
required_packages <- c("tidyverse", "dplyr","haven","here","DescTools","labelled",
"survey","wINEQ","Hmisc","purrr","bslib","shiny","tidyr",
"shinyFeedback","phsstyles","bsicons","shinyjs","cicerone",
"shinyjs","highcharter","shinycssloaders","reactable")
### Check if packages are installed
missing_packages <- setdiff(required_packages, installed.packages()[,"Package"])
### Install missing packages
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
### Load all packages
lapply(setdiff(required_packages,"plyr"), library, character.only = TRUE)
# Remove all objects
rm(list = ls())
# Set vector size to maximum value
mem.maxVSize(vsize = Inf)
################################################################################
######################## Importing the datasets ################################
################################################################################
## Set file-paths
data_folder <- "/input/Data"
output_folder <- "/output"
script_path <- paste0(data_folder, "/Script")
# 2. Sourcing modules functions  ------------------------
list.files(paste0(here(),"/script/modules/results visualization"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
list.files(paste0(here(),"/script/modules/buttons"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
source(paste0(here(),"/script/graph_functions.R"))
source(paste0(here(),"/script/01_simulated function.R"))
# 3. Required datafiles ------------------------------------------------------------
bl_df <- readRDS(paste0(here(),output_folder,"/Shiny Data/before_data_wtht_na.rds"))
bl_cncpts <- readRDS(paste0(here(),output_folder,"/Shiny Data/Baseline_data_tab.rds"))
# shapefiles (for map)
#ca_bound <- readRDS("data/CA_boundary.rds") # Council area
# List of possible selected output
# HSC partnership names - also used as the choices for an additional parent area filter
# when intermediate zone/localities are selected to reduce the number of IZ/localities
pov_parameter_list <- sort(unique(bl_cncpts$Parameter))
pov_area_list <- sort(unique(bl_cncpts$Area))
# module ui function
# icon and description of the profile are optional arguments
# 5. Dashboard theme ---------------------------------------------------------------
# see https://rstudio.github.io/bslib/articles/bs5-variables/ for more details
phs_theme <- bs_theme(
# high level theming
version = 5, # bootstrap v5 required to use bslib components (like cards etc.)
bg = "white", # make background white
fg = "#222", # make foreground darkgrey/black
"progress-bar-bg" = "0078D4",
bootswatch = "shiny", # use default shiny theme
primary = "#006D77", # make primary colour green - this will change i.e. active pill colour
"form-label-font-weight" = "550"#, # font-weight for filter labels
) %>%
# create colour variables to use below
bs_add_variables(
"phs-gray" = "#F2F2F2",
"phs-blue" = "#0078D4",
"phs-teal" = "#006D77"
) %>%
# lower level theming
bs_add_rules(
list(
".info-box-header { background-color: $phs-teal; color: #FFF;}", # info box header lighter phs purple colour with white text
".methodology-table td{ border:thin solid black; padding:3px;}", # for indicator def tab - make nested table cells have black border
".rt-tr-details {padding: 0px; box-shadow: inset 0 1px 3px #dbdbdb; background: #FDFDFC;}", # for indicator definitions tab - make expandable panel grey
".chart-controls-icon {background-color:$phs-blue; color:white; border-radius:5em; padding:5px;}" # styling of the chart controls icon
)
)
simulate_tax_policy(bl_df,bl_cncpts,0,0,0,0)
Sim_data_tab
bl_cncpts %>% View()
Sim_data_tab %>% View()
bl_cncpts %>% View(title = "bl")
Sim_data_tab %>% View(title = "sim")
runApp('shiny_app')
Sim_data_tab <- bl_cncpts %>%
left_join(Sim_data_tab, by=c("Income","Parameter","Area","Poverty line"))
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
###############################################################################.
#
# Global script ----
#
###############################################################################.
################################################################################
######### CEQ initial data wrangling file for MALAWI ###########################
################################################################################
# Data wrangling
######################## Importing library and external files ##################
### List of required packages
required_packages <- c("tidyverse", "dplyr","haven","here","DescTools","labelled",
"survey","wINEQ","Hmisc","purrr","bslib","shiny","tidyr",
"shinyFeedback","phsstyles","bsicons","shinyjs","cicerone",
"shinyjs","highcharter","shinycssloaders","reactable")
### Check if packages are installed
missing_packages <- setdiff(required_packages, installed.packages()[,"Package"])
### Install missing packages
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
### Load all packages
lapply(setdiff(required_packages,"plyr"), library, character.only = TRUE)
# Remove all objects
rm(list = ls())
# Set vector size to maximum value
mem.maxVSize(vsize = Inf)
################################################################################
######################## Importing the datasets ################################
################################################################################
## Set file-paths
data_folder <- "/input/Data"
output_folder <- "/output"
script_path <- paste0(data_folder, "/Script")
# 2. Sourcing modules functions  ------------------------
list.files(paste0(here(),"/script/modules/results visualization"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
list.files(paste0(here(),"/script/modules/buttons"), full.names = TRUE, recursive = TRUE) %>%
map(~ source(.))
source(paste0(here(),"/script/graph_functions.R"))
source(paste0(here(),"/script/01_simulated function.R"))
# 3. Required datafiles ------------------------------------------------------------
bl_df <- readRDS(paste0(here(),output_folder,"/Shiny Data/before_data_wtht_na.rds"))
bl_cncpts <- readRDS(paste0(here(),output_folder,"/Shiny Data/Baseline_data_tab.rds"))
# shapefiles (for map)
#ca_bound <- readRDS("data/CA_boundary.rds") # Council area
# List of possible selected output
# HSC partnership names - also used as the choices for an additional parent area filter
# when intermediate zone/localities are selected to reduce the number of IZ/localities
pov_parameter_list <- sort(unique(bl_cncpts$Parameter))
pov_area_list <- sort(unique(bl_cncpts$Area))
# module ui function
# icon and description of the profile are optional arguments
# 5. Dashboard theme ---------------------------------------------------------------
# see https://rstudio.github.io/bslib/articles/bs5-variables/ for more details
phs_theme <- bs_theme(
# high level theming
version = 5, # bootstrap v5 required to use bslib components (like cards etc.)
bg = "white", # make background white
fg = "#222", # make foreground darkgrey/black
"progress-bar-bg" = "0078D4",
bootswatch = "shiny", # use default shiny theme
primary = "#006D77", # make primary colour green - this will change i.e. active pill colour
"form-label-font-weight" = "550"#, # font-weight for filter labels
) %>%
# create colour variables to use below
bs_add_variables(
"phs-gray" = "#F2F2F2",
"phs-blue" = "#0078D4",
"phs-teal" = "#006D77"
) %>%
# lower level theming
bs_add_rules(
list(
".info-box-header { background-color: $phs-teal; color: #FFF;}", # info box header lighter phs purple colour with white text
".methodology-table td{ border:thin solid black; padding:3px;}", # for indicator def tab - make nested table cells have black border
".rt-tr-details {padding: 0px; box-shadow: inset 0 1px 3px #dbdbdb; background: #FDFDFC;}", # for indicator definitions tab - make expandable panel grey
".chart-controls-icon {background-color:$phs-blue; color:white; border-radius:5em; padding:5px;}" # styling of the chart controls icon
)
)
simulate_tax_policy(bl_df,bl_cncpts,0,0,0,0)
as.data.frame(cbind(t(poverty_headcount_ratio), t(nbr_poor), t(poverty_gap), t(poverty_sev),
Income = c("Disposable Income","Market Income plus pensions",
"Gross Income","Net Market Income","Consumable Income","Final Income")))
runApp('shiny_app')
runApp('shiny_app')
shiny::runApp('shiny_app')
